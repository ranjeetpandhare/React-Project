const redux=require('redux')
const createStore=redux.createStore
const thunkMiddleWare=require('redux-thunk').default
const applyMiddleWare=redux.applyMiddleware
const axios =require('axios')
// step1...............................................................
const FETCH_USER_REQUEST='FETCH_USER_REQUEST'
const FETCH_USER_SUCESS='FETCH_USER_SUCESS'
const FETCH_USER_ERROR='FETCH_USER_ERROR'

const fetchUserRequest=()=>{
    return {type:FETCH_USER_REQUEST}
}
const fetchUserSucess=(users)=>{
    return {type:FETCH_USER_SUCESS,payLoad:users}
}
const fetchUserError=(error)=>{
    return {type:FETCH_USER_ERROR,payLoad:error}
}

// step 2..................................................................
const initialState={loading:true,Users:[],error:''}
const reducer=(state=initialState,action)=>{
    switch(action.type){
        case FETCH_USER_REQUEST:
            return{...state,loading:true}
        case FETCH_USER_SUCESS:
            return{loading:false,Users:action.payLoad,error:''}
        case FETCH_USER_ERROR:
            return{loading:false,Users:[],error:action.payLoad}
        default:
            return state
    }
}
//action creater....................................
const fetchUser=()=>{
return function(dispatch){
    dispatch(fetchUserRequest())
    axios.get('http://jsonplaceholder.typicode.com/users')
    .then(response=>{
        // Response.data is the user
        console.log(response.data)
        const users=response.data.map(user=>user.id)
        dispatch(fetchUserSucess(users))
    })
    .catch(error=>{
        // error:error massgege
        dispatch(fetchUserError(error.message))
    })
}
}

// step 3.............................................
const store=createStore(reducer,applyMiddleWare(thunkMiddleWare))
store.subscribe(()=>{console.log(store.getState())})
store.dispatch(fetchUser())